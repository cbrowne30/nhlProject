# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.game_game_data_status import GameGameDataStatus
from openapi_client.models.game_game_data_venue import GameGameDataVenue
from openapi_client.models.game_linescore import GameLinescore
from openapi_client.models.schedule_game_content import ScheduleGameContent
from openapi_client.models.schedule_game_teams import ScheduleGameTeams
from openapi_client.models.schedule_game_tickets_inner import ScheduleGameTicketsInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ScheduleGame(BaseModel):
    """
    ScheduleGame
    """ # noqa: E501
    game_pk: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="gamePk")
    link: Optional[StrictStr] = None
    game_type: Optional[StrictStr] = Field(default=None, alias="gameType")
    season: Optional[StrictStr] = None
    game_date: Optional[datetime] = Field(default=None, alias="gameDate")
    status: Optional[GameGameDataStatus] = None
    teams: Optional[ScheduleGameTeams] = None
    linescore: Optional[GameLinescore] = None
    venue: Optional[GameGameDataVenue] = None
    tickets: Optional[List[ScheduleGameTicketsInner]] = None
    content: Optional[ScheduleGameContent] = None
    __properties: ClassVar[List[str]] = ["gamePk", "link", "gameType", "season", "gameDate", "status", "teams", "linescore", "venue", "tickets", "content"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ScheduleGame from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of teams
        if self.teams:
            _dict['teams'] = self.teams.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linescore
        if self.linescore:
            _dict['linescore'] = self.linescore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of venue
        if self.venue:
            _dict['venue'] = self.venue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tickets (list)
        _items = []
        if self.tickets:
            for _item in self.tickets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tickets'] = _items
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ScheduleGame from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gamePk": obj.get("gamePk"),
            "link": obj.get("link"),
            "gameType": obj.get("gameType"),
            "season": obj.get("season"),
            "gameDate": obj.get("gameDate"),
            "status": GameGameDataStatus.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "teams": ScheduleGameTeams.from_dict(obj.get("teams")) if obj.get("teams") is not None else None,
            "linescore": GameLinescore.from_dict(obj.get("linescore")) if obj.get("linescore") is not None else None,
            "venue": GameGameDataVenue.from_dict(obj.get("venue")) if obj.get("venue") is not None else None,
            "tickets": [ScheduleGameTicketsInner.from_dict(_item) for _item in obj.get("tickets")] if obj.get("tickets") is not None else None,
            "content": ScheduleGameContent.from_dict(obj.get("content")) if obj.get("content") is not None else None
        })
        return _obj


