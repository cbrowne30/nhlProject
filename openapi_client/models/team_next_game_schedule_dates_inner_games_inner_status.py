# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TeamNextGameScheduleDatesInnerGamesInnerStatus(BaseModel):
    """
    TeamNextGameScheduleDatesInnerGamesInnerStatus
    """ # noqa: E501
    abstract_game_state: Optional[StrictStr] = Field(default=None, alias="abstractGameState")
    coded_game_state: Optional[StrictStr] = Field(default=None, alias="codedGameState")
    detailed_state: Optional[StrictStr] = Field(default=None, alias="detailedState")
    status_code: Optional[StrictStr] = Field(default=None, alias="statusCode")
    start_time_tbd: Optional[StrictBool] = Field(default=None, alias="startTimeTBD")
    __properties: ClassVar[List[str]] = ["abstractGameState", "codedGameState", "detailedState", "statusCode", "startTimeTBD"]

    @field_validator('abstract_game_state')
    def abstract_game_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Live', 'Preview'):
            raise ValueError("must be one of enum values ('Live', 'Preview')")
        return value

    @field_validator('coded_game_state')
    def coded_game_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('2', '3'):
            raise ValueError("must be one of enum values ('2', '3')")
        return value

    @field_validator('detailed_state')
    def detailed_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('In Progress', 'Pre-Game'):
            raise ValueError("must be one of enum values ('In Progress', 'Pre-Game')")
        return value

    @field_validator('status_code')
    def status_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('2', '3'):
            raise ValueError("must be one of enum values ('2', '3')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TeamNextGameScheduleDatesInnerGamesInnerStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TeamNextGameScheduleDatesInnerGamesInnerStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "abstractGameState": obj.get("abstractGameState"),
            "codedGameState": obj.get("codedGameState"),
            "detailedState": obj.get("detailedState"),
            "statusCode": obj.get("statusCode"),
            "startTimeTBD": obj.get("startTimeTBD")
        })
        return _obj


