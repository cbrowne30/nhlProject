# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.draft_prospect_primary_position import DraftProspectPrimaryPosition
from openapi_client.models.player_current_team import PlayerCurrentTeam
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Player(BaseModel):
    """
    Player
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    link: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    primary_number: Optional[StrictStr] = Field(default=None, alias="primaryNumber")
    birth_date: Optional[date] = Field(default=None, alias="birthDate")
    current_age: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentAge")
    birth_city: Optional[StrictStr] = Field(default=None, alias="birthCity")
    birth_state_province: Optional[StrictStr] = Field(default=None, alias="birthStateProvince")
    birth_country: Optional[StrictStr] = Field(default=None, alias="birthCountry")
    nationality: Optional[StrictStr] = None
    height: Optional[StrictStr] = None
    weight: Optional[Union[StrictFloat, StrictInt]] = None
    active: Optional[StrictBool] = None
    alternate_captain: Optional[StrictBool] = Field(default=None, alias="alternateCaptain")
    captain: Optional[StrictBool] = None
    rookie: Optional[StrictBool] = None
    shoots_catches: Optional[StrictStr] = Field(default=None, alias="shootsCatches")
    roster_status: Optional[StrictStr] = Field(default=None, alias="rosterStatus")
    current_team: Optional[PlayerCurrentTeam] = Field(default=None, alias="currentTeam")
    primary_position: Optional[DraftProspectPrimaryPosition] = Field(default=None, alias="primaryPosition")
    __properties: ClassVar[List[str]] = ["id", "fullName", "link", "firstName", "lastName", "primaryNumber", "birthDate", "currentAge", "birthCity", "birthStateProvince", "birthCountry", "nationality", "height", "weight", "active", "alternateCaptain", "captain", "rookie", "shootsCatches", "rosterStatus", "currentTeam", "primaryPosition"]

    @field_validator('shoots_catches')
    def shoots_catches_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('L', 'R'):
            raise ValueError("must be one of enum values ('L', 'R')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Player from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_team
        if self.current_team:
            _dict['currentTeam'] = self.current_team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_position
        if self.primary_position:
            _dict['primaryPosition'] = self.primary_position.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Player from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "fullName": obj.get("fullName"),
            "link": obj.get("link"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "primaryNumber": obj.get("primaryNumber"),
            "birthDate": obj.get("birthDate"),
            "currentAge": obj.get("currentAge"),
            "birthCity": obj.get("birthCity"),
            "birthStateProvince": obj.get("birthStateProvince"),
            "birthCountry": obj.get("birthCountry"),
            "nationality": obj.get("nationality"),
            "height": obj.get("height"),
            "weight": obj.get("weight"),
            "active": obj.get("active"),
            "alternateCaptain": obj.get("alternateCaptain"),
            "captain": obj.get("captain"),
            "rookie": obj.get("rookie"),
            "shootsCatches": obj.get("shootsCatches"),
            "rosterStatus": obj.get("rosterStatus"),
            "currentTeam": PlayerCurrentTeam.from_dict(obj.get("currentTeam")) if obj.get("currentTeam") is not None else None,
            "primaryPosition": DraftProspectPrimaryPosition.from_dict(obj.get("primaryPosition")) if obj.get("primaryPosition") is not None else None
        })
        return _obj


