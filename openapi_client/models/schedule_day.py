# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from pydantic import Field
from openapi_client.models.schedule_game import ScheduleGame
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ScheduleDay(BaseModel):
    """
    ScheduleDay
    """ # noqa: E501
    var_date: Optional[date] = Field(default=None, alias="date")
    total_items: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalItems")
    total_events: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalEvents")
    total_games: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalGames")
    total_matches: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalMatches")
    games: Optional[List[ScheduleGame]] = None
    events: Optional[List[Dict[str, Any]]] = None
    matches: Optional[List[Dict[str, Any]]] = None
    __properties: ClassVar[List[str]] = ["date", "totalItems", "totalEvents", "totalGames", "totalMatches", "games", "events", "matches"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ScheduleDay from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in games (list)
        _items = []
        if self.games:
            for _item in self.games:
                if _item:
                    _items.append(_item.to_dict())
            _dict['games'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ScheduleDay from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "totalItems": obj.get("totalItems"),
            "totalEvents": obj.get("totalEvents"),
            "totalGames": obj.get("totalGames"),
            "totalMatches": obj.get("totalMatches"),
            "games": [ScheduleGame.from_dict(_item) for _item in obj.get("games")] if obj.get("games") is not None else None,
            "events": obj.get("events"),
            "matches": obj.get("matches")
        })
        return _obj


