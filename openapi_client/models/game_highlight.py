# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.game_editorial_keyword import GameEditorialKeyword
from openapi_client.models.game_highlight_playbacks_inner import GameHighlightPlaybacksInner
from openapi_client.models.photo import Photo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GameHighlight(BaseModel):
    """
    GameHighlight
    """ # noqa: E501
    type: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    var_date: Optional[datetime] = Field(default=None, alias="date")
    title: Optional[StrictStr] = None
    blurb: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    duration: Optional[StrictStr] = None
    auth_flow: Optional[StrictBool] = Field(default=None, alias="authFlow")
    media_playback_id: Optional[StrictStr] = Field(default=None, alias="mediaPlaybackId")
    media_state: Optional[StrictStr] = Field(default=None, alias="mediaState")
    keywords: Optional[List[GameEditorialKeyword]] = None
    image: Optional[Photo] = None
    playbacks: Optional[List[GameHighlightPlaybacksInner]] = None
    __properties: ClassVar[List[str]] = ["type", "id", "date", "title", "blurb", "description", "duration", "authFlow", "mediaPlaybackId", "mediaState", "keywords", "image", "playbacks"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('video'):
            raise ValueError("must be one of enum values ('video')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GameHighlight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in keywords (list)
        _items = []
        if self.keywords:
            for _item in self.keywords:
                if _item:
                    _items.append(_item.to_dict())
            _dict['keywords'] = _items
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in playbacks (list)
        _items = []
        if self.playbacks:
            for _item in self.playbacks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['playbacks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GameHighlight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "id": obj.get("id"),
            "date": obj.get("date"),
            "title": obj.get("title"),
            "blurb": obj.get("blurb"),
            "description": obj.get("description"),
            "duration": obj.get("duration"),
            "authFlow": obj.get("authFlow"),
            "mediaPlaybackId": obj.get("mediaPlaybackId"),
            "mediaState": obj.get("mediaState"),
            "keywords": [GameEditorialKeyword.from_dict(_item) for _item in obj.get("keywords")] if obj.get("keywords") is not None else None,
            "image": Photo.from_dict(obj.get("image")) if obj.get("image") is not None else None,
            "playbacks": [GameHighlightPlaybacksInner.from_dict(_item) for _item in obj.get("playbacks")] if obj.get("playbacks") is not None else None
        })
        return _obj


