# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from openapi_client.models.game_editorial_contributor import GameEditorialContributor
from openapi_client.models.game_editorial_keyword import GameEditorialKeyword
from openapi_client.models.game_editorial_media import GameEditorialMedia
from openapi_client.models.game_editorial_token_data import GameEditorialTokenData
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GameEditorial(BaseModel):
    """
    GameEditorial
    """ # noqa: E501
    type: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    var_date: Optional[datetime] = Field(default=None, alias="date")
    id: Optional[StrictStr] = None
    headline: Optional[StrictStr] = None
    subhead: Optional[StrictStr] = None
    seo_title: Optional[StrictStr] = Field(default=None, alias="seoTitle")
    seo_description: Optional[StrictStr] = Field(default=None, alias="seoDescription")
    seo_keywords: Optional[StrictStr] = Field(default=None, alias="seoKeywords")
    slug: Optional[StrictStr] = None
    commenting: Optional[StrictBool] = None
    tagline: Optional[StrictStr] = None
    token_data: Optional[GameEditorialTokenData] = Field(default=None, alias="tokenData")
    contributor: Optional[GameEditorialContributor] = None
    keywords_display: Optional[List[GameEditorialKeyword]] = Field(default=None, alias="keywordsDisplay")
    keywords_all: Optional[List[GameEditorialKeyword]] = Field(default=None, alias="keywordsAll")
    approval: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    data_uri: Optional[StrictStr] = Field(default=None, alias="dataURI")
    primary_keyword: Optional[GameEditorialKeyword] = Field(default=None, alias="primaryKeyword")
    media: Optional[GameEditorialMedia] = None
    preview: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["type", "state", "date", "id", "headline", "subhead", "seoTitle", "seoDescription", "seoKeywords", "slug", "commenting", "tagline", "tokenData", "contributor", "keywordsDisplay", "keywordsAll", "approval", "url", "dataURI", "primaryKeyword", "media", "preview"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GameEditorial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of token_data
        if self.token_data:
            _dict['tokenData'] = self.token_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contributor
        if self.contributor:
            _dict['contributor'] = self.contributor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in keywords_display (list)
        _items = []
        if self.keywords_display:
            for _item in self.keywords_display:
                if _item:
                    _items.append(_item.to_dict())
            _dict['keywordsDisplay'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in keywords_all (list)
        _items = []
        if self.keywords_all:
            for _item in self.keywords_all:
                if _item:
                    _items.append(_item.to_dict())
            _dict['keywordsAll'] = _items
        # override the default output from pydantic by calling `to_dict()` of primary_keyword
        if self.primary_keyword:
            _dict['primaryKeyword'] = self.primary_keyword.to_dict()
        # override the default output from pydantic by calling `to_dict()` of media
        if self.media:
            _dict['media'] = self.media.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GameEditorial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "state": obj.get("state"),
            "date": obj.get("date"),
            "id": obj.get("id"),
            "headline": obj.get("headline"),
            "subhead": obj.get("subhead"),
            "seoTitle": obj.get("seoTitle"),
            "seoDescription": obj.get("seoDescription"),
            "seoKeywords": obj.get("seoKeywords"),
            "slug": obj.get("slug"),
            "commenting": obj.get("commenting"),
            "tagline": obj.get("tagline"),
            "tokenData": GameEditorialTokenData.from_dict(obj.get("tokenData")) if obj.get("tokenData") is not None else None,
            "contributor": GameEditorialContributor.from_dict(obj.get("contributor")) if obj.get("contributor") is not None else None,
            "keywordsDisplay": [GameEditorialKeyword.from_dict(_item) for _item in obj.get("keywordsDisplay")] if obj.get("keywordsDisplay") is not None else None,
            "keywordsAll": [GameEditorialKeyword.from_dict(_item) for _item in obj.get("keywordsAll")] if obj.get("keywordsAll") is not None else None,
            "approval": obj.get("approval"),
            "url": obj.get("url"),
            "dataURI": obj.get("dataURI"),
            "primaryKeyword": GameEditorialKeyword.from_dict(obj.get("primaryKeyword")) if obj.get("primaryKeyword") is not None else None,
            "media": GameEditorialMedia.from_dict(obj.get("media")) if obj.get("media") is not None else None,
            "preview": obj.get("preview")
        })
        return _obj


