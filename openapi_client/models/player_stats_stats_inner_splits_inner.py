# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.division_conference import DivisionConference
from openapi_client.models.draft_drafts_inner_rounds_inner_picks_inner_team import DraftDraftsInnerRoundsInnerPicksInnerTeam
from openapi_client.models.player_stats_stats_inner_splits_inner_opponent_division import PlayerStatsStatsInnerSplitsInnerOpponentDivision
from openapi_client.models.player_stats_stats_inner_splits_inner_stat import PlayerStatsStatsInnerSplitsInnerStat
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PlayerStatsStatsInnerSplitsInner(BaseModel):
    """
    PlayerStatsStatsInnerSplitsInner
    """ # noqa: E501
    season: Optional[StrictStr] = None
    stat: Optional[PlayerStatsStatsInnerSplitsInnerStat] = None
    is_home: Optional[StrictBool] = Field(default=None, alias="isHome")
    is_win: Optional[StrictBool] = Field(default=None, alias="isWin")
    is_ot: Optional[StrictBool] = Field(default=None, alias="isOT")
    month: Optional[Union[StrictFloat, StrictInt]] = None
    day_of_week: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="dayOfWeek")
    opponent: Optional[DraftDraftsInnerRoundsInnerPicksInnerTeam] = None
    opponent_division: Optional[PlayerStatsStatsInnerSplitsInnerOpponentDivision] = Field(default=None, alias="opponentDivision")
    opponent_conference: Optional[DivisionConference] = Field(default=None, alias="opponentConference")
    __properties: ClassVar[List[str]] = ["season", "stat", "isHome", "isWin", "isOT", "month", "dayOfWeek", "opponent", "opponentDivision", "opponentConference"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PlayerStatsStatsInnerSplitsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stat
        if self.stat:
            _dict['stat'] = self.stat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opponent
        if self.opponent:
            _dict['opponent'] = self.opponent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opponent_division
        if self.opponent_division:
            _dict['opponentDivision'] = self.opponent_division.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opponent_conference
        if self.opponent_conference:
            _dict['opponentConference'] = self.opponent_conference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PlayerStatsStatsInnerSplitsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "season": obj.get("season"),
            "stat": PlayerStatsStatsInnerSplitsInnerStat.from_dict(obj.get("stat")) if obj.get("stat") is not None else None,
            "isHome": obj.get("isHome"),
            "isWin": obj.get("isWin"),
            "isOT": obj.get("isOT"),
            "month": obj.get("month"),
            "dayOfWeek": obj.get("dayOfWeek"),
            "opponent": DraftDraftsInnerRoundsInnerPicksInnerTeam.from_dict(obj.get("opponent")) if obj.get("opponent") is not None else None,
            "opponentDivision": PlayerStatsStatsInnerSplitsInnerOpponentDivision.from_dict(obj.get("opponentDivision")) if obj.get("opponentDivision") is not None else None,
            "opponentConference": DivisionConference.from_dict(obj.get("opponentConference")) if obj.get("opponentConference") is not None else None
        })
        return _obj


