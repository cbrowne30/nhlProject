# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.game_linescore_intermission_info import GameLinescoreIntermissionInfo
from openapi_client.models.game_linescore_power_play_info import GameLinescorePowerPlayInfo
from openapi_client.models.game_linescore_shootout_info import GameLinescoreShootoutInfo
from openapi_client.models.game_linescore_teams import GameLinescoreTeams
from openapi_client.models.game_period import GamePeriod
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GameLinescore(BaseModel):
    """
    GameLinescore
    """ # noqa: E501
    current_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentPeriod")
    current_period_ordinal: Optional[StrictStr] = Field(default=None, alias="currentPeriodOrdinal")
    current_period_time_remaining: Optional[StrictStr] = Field(default=None, alias="currentPeriodTimeRemaining")
    periods: Optional[List[GamePeriod]] = None
    shootout_info: Optional[GameLinescoreShootoutInfo] = Field(default=None, alias="shootoutInfo")
    teams: Optional[GameLinescoreTeams] = None
    power_play_strength: Optional[StrictStr] = Field(default=None, alias="powerPlayStrength")
    has_shootout: Optional[StrictBool] = Field(default=None, alias="hasShootout")
    intermission_info: Optional[GameLinescoreIntermissionInfo] = Field(default=None, alias="intermissionInfo")
    power_play_info: Optional[GameLinescorePowerPlayInfo] = Field(default=None, alias="powerPlayInfo")
    __properties: ClassVar[List[str]] = ["currentPeriod", "currentPeriodOrdinal", "currentPeriodTimeRemaining", "periods", "shootoutInfo", "teams", "powerPlayStrength", "hasShootout", "intermissionInfo", "powerPlayInfo"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GameLinescore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in periods (list)
        _items = []
        if self.periods:
            for _item in self.periods:
                if _item:
                    _items.append(_item.to_dict())
            _dict['periods'] = _items
        # override the default output from pydantic by calling `to_dict()` of shootout_info
        if self.shootout_info:
            _dict['shootoutInfo'] = self.shootout_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of teams
        if self.teams:
            _dict['teams'] = self.teams.to_dict()
        # override the default output from pydantic by calling `to_dict()` of intermission_info
        if self.intermission_info:
            _dict['intermissionInfo'] = self.intermission_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of power_play_info
        if self.power_play_info:
            _dict['powerPlayInfo'] = self.power_play_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GameLinescore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentPeriod": obj.get("currentPeriod"),
            "currentPeriodOrdinal": obj.get("currentPeriodOrdinal"),
            "currentPeriodTimeRemaining": obj.get("currentPeriodTimeRemaining"),
            "periods": [GamePeriod.from_dict(_item) for _item in obj.get("periods")] if obj.get("periods") is not None else None,
            "shootoutInfo": GameLinescoreShootoutInfo.from_dict(obj.get("shootoutInfo")) if obj.get("shootoutInfo") is not None else None,
            "teams": GameLinescoreTeams.from_dict(obj.get("teams")) if obj.get("teams") is not None else None,
            "powerPlayStrength": obj.get("powerPlayStrength"),
            "hasShootout": obj.get("hasShootout"),
            "intermissionInfo": GameLinescoreIntermissionInfo.from_dict(obj.get("intermissionInfo")) if obj.get("intermissionInfo") is not None else None,
            "powerPlayInfo": GameLinescorePowerPlayInfo.from_dict(obj.get("powerPlayInfo")) if obj.get("powerPlayInfo") is not None else None
        })
        return _obj


