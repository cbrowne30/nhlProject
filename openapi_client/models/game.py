# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.game_game_data import GameGameData
from openapi_client.models.game_live_data import GameLiveData
from openapi_client.models.game_meta_data import GameMetaData
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Game(BaseModel):
    """
    Game
    """ # noqa: E501
    copyright: Optional[StrictStr] = None
    game_pk: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="gamePk")
    link: Optional[StrictStr] = None
    meta_data: Optional[GameMetaData] = Field(default=None, alias="metaData")
    game_data: Optional[GameGameData] = Field(default=None, alias="gameData")
    live_data: Optional[GameLiveData] = Field(default=None, alias="liveData")
    __properties: ClassVar[List[str]] = ["copyright", "gamePk", "link", "metaData", "gameData", "liveData"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Game from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meta_data
        if self.meta_data:
            _dict['metaData'] = self.meta_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_data
        if self.game_data:
            _dict['gameData'] = self.game_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of live_data
        if self.live_data:
            _dict['liveData'] = self.live_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Game from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "copyright": obj.get("copyright"),
            "gamePk": obj.get("gamePk"),
            "link": obj.get("link"),
            "metaData": GameMetaData.from_dict(obj.get("metaData")) if obj.get("metaData") is not None else None,
            "gameData": GameGameData.from_dict(obj.get("gameData")) if obj.get("gameData") is not None else None,
            "liveData": GameLiveData.from_dict(obj.get("liveData")) if obj.get("liveData") is not None else None
        })
        return _obj


