# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.game_highlight import GameHighlight
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GameContentMediaMilestonesItemsInner(BaseModel):
    """
    GameContentMediaMilestonesItemsInner
    """ # noqa: E501
    title: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    time_absolute: Optional[datetime] = Field(default=None, alias="timeAbsolute")
    time_offset: Optional[StrictStr] = Field(default=None, alias="timeOffset")
    period: Optional[StrictStr] = None
    stats_event_id: Optional[StrictStr] = Field(default=None, alias="statsEventId")
    team_id: Optional[StrictStr] = Field(default=None, alias="teamId")
    player_id: Optional[StrictStr] = Field(default=None, alias="playerId")
    period_time: Optional[StrictStr] = Field(default=None, alias="periodTime")
    ordinal_num: Optional[StrictStr] = Field(default=None, alias="ordinalNum")
    highlight: Optional[GameHighlight] = None
    __properties: ClassVar[List[str]] = ["title", "description", "type", "timeAbsolute", "timeOffset", "period", "statsEventId", "teamId", "playerId", "periodTime", "ordinalNum", "highlight"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('BROADCAST_START', 'BROADCAST_END', 'GOAL', 'PERIOD_END', 'PERIOD_START', 'SHOT'):
            raise ValueError("must be one of enum values ('BROADCAST_START', 'BROADCAST_END', 'GOAL', 'PERIOD_END', 'PERIOD_START', 'SHOT')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GameContentMediaMilestonesItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of highlight
        if self.highlight:
            _dict['highlight'] = self.highlight.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GameContentMediaMilestonesItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "timeAbsolute": obj.get("timeAbsolute"),
            "timeOffset": obj.get("timeOffset"),
            "period": obj.get("period"),
            "statsEventId": obj.get("statsEventId"),
            "teamId": obj.get("teamId"),
            "playerId": obj.get("playerId"),
            "periodTime": obj.get("periodTime"),
            "ordinalNum": obj.get("ordinalNum"),
            "highlight": GameHighlight.from_dict(obj.get("highlight")) if obj.get("highlight") is not None else None
        })
        return _obj


