# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.draft_prospect_amateur_league import DraftProspectAmateurLeague
from openapi_client.models.draft_prospect_amateur_team import DraftProspectAmateurTeam
from openapi_client.models.draft_prospect_primary_position import DraftProspectPrimaryPosition
from openapi_client.models.draft_prospect_prospect_category import DraftProspectProspectCategory
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DraftProspect(BaseModel):
    """
    DraftProspect
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    link: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    birth_date: Optional[date] = Field(default=None, alias="birthDate")
    birth_city: Optional[StrictStr] = Field(default=None, alias="birthCity")
    birth_country: Optional[StrictStr] = Field(default=None, alias="birthCountry")
    nationality: Optional[StrictStr] = None
    height: Optional[StrictStr] = None
    weight: Optional[Union[StrictFloat, StrictInt]] = None
    shoots_catches: Optional[StrictStr] = Field(default=None, alias="shootsCatches")
    primary_position: Optional[DraftProspectPrimaryPosition] = Field(default=None, alias="primaryPosition")
    prospect_category: Optional[DraftProspectProspectCategory] = Field(default=None, alias="prospectCategory")
    amateur_team: Optional[DraftProspectAmateurTeam] = Field(default=None, alias="amateurTeam")
    amateur_league: Optional[DraftProspectAmateurLeague] = Field(default=None, alias="amateurLeague")
    ranks: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["id", "fullName", "link", "firstName", "lastName", "birthDate", "birthCity", "birthCountry", "nationality", "height", "weight", "shootsCatches", "primaryPosition", "prospectCategory", "amateurTeam", "amateurLeague", "ranks"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DraftProspect from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of primary_position
        if self.primary_position:
            _dict['primaryPosition'] = self.primary_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prospect_category
        if self.prospect_category:
            _dict['prospectCategory'] = self.prospect_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amateur_team
        if self.amateur_team:
            _dict['amateurTeam'] = self.amateur_team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amateur_league
        if self.amateur_league:
            _dict['amateurLeague'] = self.amateur_league.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DraftProspect from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "fullName": obj.get("fullName"),
            "link": obj.get("link"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "birthDate": obj.get("birthDate"),
            "birthCity": obj.get("birthCity"),
            "birthCountry": obj.get("birthCountry"),
            "nationality": obj.get("nationality"),
            "height": obj.get("height"),
            "weight": obj.get("weight"),
            "shootsCatches": obj.get("shootsCatches"),
            "primaryPosition": DraftProspectPrimaryPosition.from_dict(obj.get("primaryPosition")) if obj.get("primaryPosition") is not None else None,
            "prospectCategory": DraftProspectProspectCategory.from_dict(obj.get("prospectCategory")) if obj.get("prospectCategory") is not None else None,
            "amateurTeam": DraftProspectAmateurTeam.from_dict(obj.get("amateurTeam")) if obj.get("amateurTeam") is not None else None,
            "amateurLeague": DraftProspectAmateurLeague.from_dict(obj.get("amateurLeague")) if obj.get("amateurLeague") is not None else None,
            "ranks": obj.get("ranks")
        })
        return _obj


