# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.division_conference import DivisionConference
from openapi_client.models.standings_records_inner_division import StandingsRecordsInnerDivision
from openapi_client.models.standings_records_inner_league import StandingsRecordsInnerLeague
from openapi_client.models.standings_records_inner_team_records_inner import StandingsRecordsInnerTeamRecordsInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StandingsRecordsInner(BaseModel):
    """
    StandingsRecordsInner
    """ # noqa: E501
    standings_type: Optional[StrictStr] = Field(default=None, alias="standingsType")
    league: Optional[StandingsRecordsInnerLeague] = None
    division: Optional[StandingsRecordsInnerDivision] = None
    conference: Optional[DivisionConference] = None
    team_records: Optional[List[StandingsRecordsInnerTeamRecordsInner]] = Field(default=None, alias="teamRecords")
    __properties: ClassVar[List[str]] = ["standingsType", "league", "division", "conference", "teamRecords"]

    @field_validator('standings_type')
    def standings_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('regularSeason'):
            raise ValueError("must be one of enum values ('regularSeason')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StandingsRecordsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of league
        if self.league:
            _dict['league'] = self.league.to_dict()
        # override the default output from pydantic by calling `to_dict()` of division
        if self.division:
            _dict['division'] = self.division.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conference
        if self.conference:
            _dict['conference'] = self.conference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in team_records (list)
        _items = []
        if self.team_records:
            for _item in self.team_records:
                if _item:
                    _items.append(_item.to_dict())
            _dict['teamRecords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StandingsRecordsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "standingsType": obj.get("standingsType"),
            "league": StandingsRecordsInnerLeague.from_dict(obj.get("league")) if obj.get("league") is not None else None,
            "division": StandingsRecordsInnerDivision.from_dict(obj.get("division")) if obj.get("division") is not None else None,
            "conference": DivisionConference.from_dict(obj.get("conference")) if obj.get("conference") is not None else None,
            "teamRecords": [StandingsRecordsInnerTeamRecordsInner.from_dict(_item) for _item in obj.get("teamRecords")] if obj.get("teamRecords") is not None else None
        })
        return _obj


