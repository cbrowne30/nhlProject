# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.player_current_team import PlayerCurrentTeam
from openapi_client.models.schedule_game_teams_home_league_record import ScheduleGameTeamsHomeLeagueRecord
from openapi_client.models.standings_records_inner_team_records_inner_streak import StandingsRecordsInnerTeamRecordsInnerStreak
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StandingsRecordsInnerTeamRecordsInner(BaseModel):
    """
    StandingsRecordsInnerTeamRecordsInner
    """ # noqa: E501
    team: Optional[PlayerCurrentTeam] = None
    league_record: Optional[ScheduleGameTeamsHomeLeagueRecord] = Field(default=None, alias="leagueRecord")
    goals_against: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="goalsAgainst")
    goals_scored: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="goalsScored")
    points: Optional[Union[StrictFloat, StrictInt]] = None
    division_rank: Optional[StrictStr] = Field(default=None, alias="divisionRank")
    conference_rank: Optional[StrictStr] = Field(default=None, alias="conferenceRank")
    league_rank: Optional[StrictStr] = Field(default=None, alias="leagueRank")
    wild_card_rank: Optional[StrictStr] = Field(default=None, alias="wildCardRank")
    row: Optional[Union[StrictFloat, StrictInt]] = None
    games_played: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="gamesPlayed")
    streak: Optional[StandingsRecordsInnerTeamRecordsInnerStreak] = None
    last_updated: Optional[datetime] = Field(default=None, alias="lastUpdated")
    __properties: ClassVar[List[str]] = ["team", "leagueRecord", "goalsAgainst", "goalsScored", "points", "divisionRank", "conferenceRank", "leagueRank", "wildCardRank", "row", "gamesPlayed", "streak", "lastUpdated"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StandingsRecordsInnerTeamRecordsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of league_record
        if self.league_record:
            _dict['leagueRecord'] = self.league_record.to_dict()
        # override the default output from pydantic by calling `to_dict()` of streak
        if self.streak:
            _dict['streak'] = self.streak.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StandingsRecordsInnerTeamRecordsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "team": PlayerCurrentTeam.from_dict(obj.get("team")) if obj.get("team") is not None else None,
            "leagueRecord": ScheduleGameTeamsHomeLeagueRecord.from_dict(obj.get("leagueRecord")) if obj.get("leagueRecord") is not None else None,
            "goalsAgainst": obj.get("goalsAgainst"),
            "goalsScored": obj.get("goalsScored"),
            "points": obj.get("points"),
            "divisionRank": obj.get("divisionRank"),
            "conferenceRank": obj.get("conferenceRank"),
            "leagueRank": obj.get("leagueRank"),
            "wildCardRank": obj.get("wildCardRank"),
            "row": obj.get("row"),
            "gamesPlayed": obj.get("gamesPlayed"),
            "streak": StandingsRecordsInnerTeamRecordsInnerStreak.from_dict(obj.get("streak")) if obj.get("streak") is not None else None,
            "lastUpdated": obj.get("lastUpdated")
        })
        return _obj


