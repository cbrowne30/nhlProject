# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GameBoxscoreTeamTeamStatsTeamSkaterStats(BaseModel):
    """
    GameBoxscoreTeamTeamStatsTeamSkaterStats
    """ # noqa: E501
    goals: Optional[Union[StrictFloat, StrictInt]] = None
    pim: Optional[Union[StrictFloat, StrictInt]] = None
    shots: Optional[Union[StrictFloat, StrictInt]] = None
    power_play_percentage: Optional[StrictStr] = Field(default=None, alias="powerPlayPercentage")
    power_play_goals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="powerPlayGoals")
    power_play_opportunities: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="powerPlayOpportunities")
    face_off_win_percentage: Optional[StrictStr] = Field(default=None, alias="faceOffWinPercentage")
    blocked: Optional[Union[StrictFloat, StrictInt]] = None
    takeaways: Optional[Union[StrictFloat, StrictInt]] = None
    giveaways: Optional[Union[StrictFloat, StrictInt]] = None
    hits: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["goals", "pim", "shots", "powerPlayPercentage", "powerPlayGoals", "powerPlayOpportunities", "faceOffWinPercentage", "blocked", "takeaways", "giveaways", "hits"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GameBoxscoreTeamTeamStatsTeamSkaterStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GameBoxscoreTeamTeamStatsTeamSkaterStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "goals": obj.get("goals"),
            "pim": obj.get("pim"),
            "shots": obj.get("shots"),
            "powerPlayPercentage": obj.get("powerPlayPercentage"),
            "powerPlayGoals": obj.get("powerPlayGoals"),
            "powerPlayOpportunities": obj.get("powerPlayOpportunities"),
            "faceOffWinPercentage": obj.get("faceOffWinPercentage"),
            "blocked": obj.get("blocked"),
            "takeaways": obj.get("takeaways"),
            "giveaways": obj.get("giveaways"),
            "hits": obj.get("hits")
        })
        return _obj


