# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PlayerStatsStatsInnerSplitsInnerStat(BaseModel):
    """
    PlayerStatsStatsInnerSplitsInnerStat
    """ # noqa: E501
    time_on_ice: Optional[StrictStr] = Field(default=None, alias="timeOnIce")
    assists: Optional[StrictStr] = None
    goals: Optional[Union[StrictFloat, StrictInt]] = None
    pim: Optional[Union[StrictFloat, StrictInt]] = None
    shots: Optional[Union[StrictFloat, StrictInt]] = None
    games: Optional[Union[StrictFloat, StrictInt]] = None
    hits: Optional[Union[StrictFloat, StrictInt]] = None
    power_play_goals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="powerPlayGoals")
    power_play_points: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="powerPlayPoints")
    power_play_time_on_ice: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="powerPlayTimeOnIce")
    even_time_on_ice: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="evenTimeOnIce")
    penalty_minutes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="penaltyMinutes")
    face_off_pct: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="faceOffPct")
    shot_pct: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shotPct")
    game_winning_goals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="gameWinningGoals")
    over_time_goals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="overTimeGoals")
    short_handed_goals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shortHandedGoals")
    short_handed_points: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shortHandedPoints")
    short_handed_time_on_ice: Optional[StrictStr] = Field(default=None, alias="shortHandedTimeOnIce")
    blocked: Optional[Union[StrictFloat, StrictInt]] = None
    plus_minus: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="plusMinus")
    points: Optional[Union[StrictFloat, StrictInt]] = None
    shifts: Optional[Union[StrictFloat, StrictInt]] = None
    time_on_ice_per_game: Optional[StrictStr] = Field(default=None, alias="timeOnIcePerGame")
    even_time_on_ice_per_game: Optional[StrictStr] = Field(default=None, alias="evenTimeOnIcePerGame")
    short_handed_time_on_ice_per_game: Optional[StrictStr] = Field(default=None, alias="shortHandedTimeOnIcePerGame")
    power_play_time_on_ice_per_game: Optional[StrictStr] = Field(default=None, alias="powerPlayTimeOnIcePerGame")
    rank_power_play_goals: Optional[StrictStr] = Field(default=None, alias="rankPowerPlayGoals")
    rank_blocked_shots: Optional[StrictStr] = Field(default=None, alias="rankBlockedShots")
    rank_assists: Optional[StrictStr] = Field(default=None, alias="rankAssists")
    rank_shot_pct: Optional[StrictStr] = Field(default=None, alias="rankShotPct")
    rank_goals: Optional[StrictStr] = Field(default=None, alias="rankGoals")
    rank_hits: Optional[StrictStr] = Field(default=None, alias="rankHits")
    rank_penalty_minutes: Optional[StrictStr] = Field(default=None, alias="rankPenaltyMinutes")
    rank_short_handed_goals: Optional[StrictStr] = Field(default=None, alias="rankShortHandedGoals")
    rank_plus_minus: Optional[StrictStr] = Field(default=None, alias="rankPlusMinus")
    rank_shots: Optional[StrictStr] = Field(default=None, alias="rankShots")
    rank_points: Optional[StrictStr] = Field(default=None, alias="rankPoints")
    rank_overtime_goals: Optional[StrictStr] = Field(default=None, alias="rankOvertimeGoals")
    rank_games_played: Optional[StrictStr] = Field(default=None, alias="rankGamesPlayed")
    goals_in_first_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="goalsInFirstPeriod")
    goals_in_second_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="goalsInSecondPeriod")
    goals_in_third_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="goalsInThirdPeriod")
    goals_trailing_by_one: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="goalsTrailingByOne")
    goals_trailing_by_two: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="goalsTrailingByTwo")
    goals_trailing_by_three_plus: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="goalsTrailingByThreePlus")
    goals_when_tied: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="goalsWhenTied")
    goals_leading_by_one: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="goalsLeadingByOne")
    goals_leading_by_two: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="goalsLeadingByTwo")
    __properties: ClassVar[List[str]] = ["timeOnIce", "assists", "goals", "pim", "shots", "games", "hits", "powerPlayGoals", "powerPlayPoints", "powerPlayTimeOnIce", "evenTimeOnIce", "penaltyMinutes", "faceOffPct", "shotPct", "gameWinningGoals", "overTimeGoals", "shortHandedGoals", "shortHandedPoints", "shortHandedTimeOnIce", "blocked", "plusMinus", "points", "shifts", "timeOnIcePerGame", "evenTimeOnIcePerGame", "shortHandedTimeOnIcePerGame", "powerPlayTimeOnIcePerGame", "rankPowerPlayGoals", "rankBlockedShots", "rankAssists", "rankShotPct", "rankGoals", "rankHits", "rankPenaltyMinutes", "rankShortHandedGoals", "rankPlusMinus", "rankShots", "rankPoints", "rankOvertimeGoals", "rankGamesPlayed", "goalsInFirstPeriod", "goalsInSecondPeriod", "goalsInThirdPeriod", "goalsTrailingByOne", "goalsTrailingByTwo", "goalsTrailingByThreePlus", "goalsWhenTied", "goalsLeadingByOne", "goalsLeadingByTwo"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PlayerStatsStatsInnerSplitsInnerStat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PlayerStatsStatsInnerSplitsInnerStat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timeOnIce": obj.get("timeOnIce"),
            "assists": obj.get("assists"),
            "goals": obj.get("goals"),
            "pim": obj.get("pim"),
            "shots": obj.get("shots"),
            "games": obj.get("games"),
            "hits": obj.get("hits"),
            "powerPlayGoals": obj.get("powerPlayGoals"),
            "powerPlayPoints": obj.get("powerPlayPoints"),
            "powerPlayTimeOnIce": obj.get("powerPlayTimeOnIce"),
            "evenTimeOnIce": obj.get("evenTimeOnIce"),
            "penaltyMinutes": obj.get("penaltyMinutes"),
            "faceOffPct": obj.get("faceOffPct"),
            "shotPct": obj.get("shotPct"),
            "gameWinningGoals": obj.get("gameWinningGoals"),
            "overTimeGoals": obj.get("overTimeGoals"),
            "shortHandedGoals": obj.get("shortHandedGoals"),
            "shortHandedPoints": obj.get("shortHandedPoints"),
            "shortHandedTimeOnIce": obj.get("shortHandedTimeOnIce"),
            "blocked": obj.get("blocked"),
            "plusMinus": obj.get("plusMinus"),
            "points": obj.get("points"),
            "shifts": obj.get("shifts"),
            "timeOnIcePerGame": obj.get("timeOnIcePerGame"),
            "evenTimeOnIcePerGame": obj.get("evenTimeOnIcePerGame"),
            "shortHandedTimeOnIcePerGame": obj.get("shortHandedTimeOnIcePerGame"),
            "powerPlayTimeOnIcePerGame": obj.get("powerPlayTimeOnIcePerGame"),
            "rankPowerPlayGoals": obj.get("rankPowerPlayGoals"),
            "rankBlockedShots": obj.get("rankBlockedShots"),
            "rankAssists": obj.get("rankAssists"),
            "rankShotPct": obj.get("rankShotPct"),
            "rankGoals": obj.get("rankGoals"),
            "rankHits": obj.get("rankHits"),
            "rankPenaltyMinutes": obj.get("rankPenaltyMinutes"),
            "rankShortHandedGoals": obj.get("rankShortHandedGoals"),
            "rankPlusMinus": obj.get("rankPlusMinus"),
            "rankShots": obj.get("rankShots"),
            "rankPoints": obj.get("rankPoints"),
            "rankOvertimeGoals": obj.get("rankOvertimeGoals"),
            "rankGamesPlayed": obj.get("rankGamesPlayed"),
            "goalsInFirstPeriod": obj.get("goalsInFirstPeriod"),
            "goalsInSecondPeriod": obj.get("goalsInSecondPeriod"),
            "goalsInThirdPeriod": obj.get("goalsInThirdPeriod"),
            "goalsTrailingByOne": obj.get("goalsTrailingByOne"),
            "goalsTrailingByTwo": obj.get("goalsTrailingByTwo"),
            "goalsTrailingByThreePlus": obj.get("goalsTrailingByThreePlus"),
            "goalsWhenTied": obj.get("goalsWhenTied"),
            "goalsLeadingByOne": obj.get("goalsLeadingByOne"),
            "goalsLeadingByTwo": obj.get("goalsLeadingByTwo")
        })
        return _obj


