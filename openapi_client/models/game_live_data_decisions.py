# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from openapi_client.models.game_decision_player import GameDecisionPlayer
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GameLiveDataDecisions(BaseModel):
    """
    GameLiveDataDecisions
    """ # noqa: E501
    winner: Optional[GameDecisionPlayer] = None
    loser: Optional[GameDecisionPlayer] = None
    first_star: Optional[GameDecisionPlayer] = Field(default=None, alias="firstStar")
    second_star: Optional[GameDecisionPlayer] = Field(default=None, alias="secondStar")
    third_star: Optional[GameDecisionPlayer] = Field(default=None, alias="thirdStar")
    __properties: ClassVar[List[str]] = ["winner", "loser", "firstStar", "secondStar", "thirdStar"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GameLiveDataDecisions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of winner
        if self.winner:
            _dict['winner'] = self.winner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loser
        if self.loser:
            _dict['loser'] = self.loser.to_dict()
        # override the default output from pydantic by calling `to_dict()` of first_star
        if self.first_star:
            _dict['firstStar'] = self.first_star.to_dict()
        # override the default output from pydantic by calling `to_dict()` of second_star
        if self.second_star:
            _dict['secondStar'] = self.second_star.to_dict()
        # override the default output from pydantic by calling `to_dict()` of third_star
        if self.third_star:
            _dict['thirdStar'] = self.third_star.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GameLiveDataDecisions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "winner": GameDecisionPlayer.from_dict(obj.get("winner")) if obj.get("winner") is not None else None,
            "loser": GameDecisionPlayer.from_dict(obj.get("loser")) if obj.get("loser") is not None else None,
            "firstStar": GameDecisionPlayer.from_dict(obj.get("firstStar")) if obj.get("firstStar") is not None else None,
            "secondStar": GameDecisionPlayer.from_dict(obj.get("secondStar")) if obj.get("secondStar") is not None else None,
            "thirdStar": GameDecisionPlayer.from_dict(obj.get("thirdStar")) if obj.get("thirdStar") is not None else None
        })
        return _obj


