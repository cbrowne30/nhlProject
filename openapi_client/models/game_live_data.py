# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from openapi_client.models.game_boxscore import GameBoxscore
from openapi_client.models.game_linescore import GameLinescore
from openapi_client.models.game_live_data_decisions import GameLiveDataDecisions
from openapi_client.models.game_live_data_plays import GameLiveDataPlays
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GameLiveData(BaseModel):
    """
    GameLiveData
    """ # noqa: E501
    plays: Optional[GameLiveDataPlays] = None
    linescore: Optional[GameLinescore] = None
    boxscore: Optional[GameBoxscore] = None
    decisions: Optional[GameLiveDataDecisions] = None
    __properties: ClassVar[List[str]] = ["plays", "linescore", "boxscore", "decisions"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GameLiveData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of plays
        if self.plays:
            _dict['plays'] = self.plays.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linescore
        if self.linescore:
            _dict['linescore'] = self.linescore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of boxscore
        if self.boxscore:
            _dict['boxscore'] = self.boxscore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of decisions
        if self.decisions:
            _dict['decisions'] = self.decisions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GameLiveData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "plays": GameLiveDataPlays.from_dict(obj.get("plays")) if obj.get("plays") is not None else None,
            "linescore": GameLinescore.from_dict(obj.get("linescore")) if obj.get("linescore") is not None else None,
            "boxscore": GameBoxscore.from_dict(obj.get("boxscore")) if obj.get("boxscore") is not None else None,
            "decisions": GameLiveDataDecisions.from_dict(obj.get("decisions")) if obj.get("decisions") is not None else None
        })
        return _obj


