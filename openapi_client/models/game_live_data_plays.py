# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from pydantic import Field
from openapi_client.models.game_live_data_plays_plays_by_period_inner import GameLiveDataPlaysPlaysByPeriodInner
from openapi_client.models.game_play import GamePlay
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GameLiveDataPlays(BaseModel):
    """
    GameLiveDataPlays
    """ # noqa: E501
    all_plays: Optional[List[GamePlay]] = Field(default=None, alias="allPlays")
    scoring_plays: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, alias="scoringPlays")
    penalty_plays: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, alias="penaltyPlays")
    plays_by_period: Optional[List[GameLiveDataPlaysPlaysByPeriodInner]] = Field(default=None, alias="playsByPeriod")
    current_play: Optional[GamePlay] = Field(default=None, alias="currentPlay")
    __properties: ClassVar[List[str]] = ["allPlays", "scoringPlays", "penaltyPlays", "playsByPeriod", "currentPlay"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GameLiveDataPlays from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in all_plays (list)
        _items = []
        if self.all_plays:
            for _item in self.all_plays:
                if _item:
                    _items.append(_item.to_dict())
            _dict['allPlays'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plays_by_period (list)
        _items = []
        if self.plays_by_period:
            for _item in self.plays_by_period:
                if _item:
                    _items.append(_item.to_dict())
            _dict['playsByPeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of current_play
        if self.current_play:
            _dict['currentPlay'] = self.current_play.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GameLiveDataPlays from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allPlays": [GamePlay.from_dict(_item) for _item in obj.get("allPlays")] if obj.get("allPlays") is not None else None,
            "scoringPlays": obj.get("scoringPlays"),
            "penaltyPlays": obj.get("penaltyPlays"),
            "playsByPeriod": [GameLiveDataPlaysPlaysByPeriodInner.from_dict(_item) for _item in obj.get("playsByPeriod")] if obj.get("playsByPeriod") is not None else None,
            "currentPlay": GamePlay.from_dict(obj.get("currentPlay")) if obj.get("currentPlay") is not None else None
        })
        return _obj


