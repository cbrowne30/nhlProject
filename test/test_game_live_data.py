# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.game_live_data import GameLiveData

class TestGameLiveData(unittest.TestCase):
    """GameLiveData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GameLiveData:
        """Test GameLiveData
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GameLiveData`
        """
        model = GameLiveData()
        if include_optional:
            return GameLiveData(
                plays = openapi_client.models.game_live_data_plays.Game_liveData_plays(
                    all_plays = [
                        openapi_client.models.game_play.GamePlay(
                            players = [
                                openapi_client.models.game_play_players_inner.GamePlay_players_inner(
                                    player = openapi_client.models.game_play_players_inner_player.GamePlay_players_inner_player(
                                        id = 8476881, 
                                        full_name = 'Tomas Hertl', 
                                        link = '/api/v1/people/8476881', ), 
                                    player_type = 'Winner', )
                                ], 
                            result = openapi_client.models.game_play_result.GamePlay_result(
                                event = 'Game End', 
                                event_code = 'SJS505', 
                                event_type_id = 'GAME_END', 
                                description = 'Game End', ), 
                            about = openapi_client.models.game_play_about.GamePlay_about(
                                event_idx = 315, 
                                event_id = 505, 
                                period = 3, 
                                period_type = 'REGULAR', 
                                ordinal_num = '3rd', 
                                period_time = '20:00', 
                                period_time_remaining = '00:00', 
                                date_time = '2018-02-11T05:30:42Z', 
                                goals = openapi_client.models.game_play_about_goals.GamePlay_about_goals(
                                    away = 4, 
                                    home = 6, ), ), 
                            coordinates = openapi_client.models.game_play_coordinates.GamePlay_coordinates(
                                x = 0, 
                                y = 0, ), 
                            team = openapi_client.models.game_play_team.GamePlay_team(
                                id = 28, 
                                name = 'San Jose Sharks', 
                                link = '/api/v1/teams/28', 
                                tri_code = 'SJS', ), )
                        ], 
                    scoring_plays = [
                        1.337
                        ], 
                    penalty_plays = [
                        1.337
                        ], 
                    plays_by_period = [
                        openapi_client.models.game_live_data_plays_plays_by_period_inner.Game_liveData_plays_playsByPeriod_inner(
                            start_index = 0, 
                            end_index = 114, )
                        ], 
                    current_play = openapi_client.models.game_play.GamePlay(), ),
                linescore = openapi_client.models.game_linescore.GameLinescore(
                    current_period = 3, 
                    current_period_ordinal = '3rd', 
                    current_period_time_remaining = 'Final', 
                    periods = [
                        openapi_client.models.game_period.GamePeriod(
                            period_type = 'REGULAR', 
                            start_time = '2018-02-11T03:09:50Z', 
                            end_time = '2018-02-11T03:44:47Z', 
                            num = 1, 
                            ordinal_num = '1st', 
                            home = openapi_client.models.game_period_home.GamePeriod_home(
                                goals = 2, 
                                shots_on_goal = 14, 
                                rink_side = 'left', ), 
                            away = openapi_client.models.game_period_away.GamePeriod_away(
                                goals = 0, 
                                shots_on_goal = 9, 
                                rink_side = 'right', ), )
                        ], 
                    shootout_info = openapi_client.models.game_linescore_shootout_info.GameLinescore_shootoutInfo(), 
                    teams = openapi_client.models.game_linescore_teams.GameLinescore_teams(), 
                    power_play_strength = 'Even', 
                    has_shootout = True, 
                    intermission_info = openapi_client.models.game_linescore_intermission_info.GameLinescore_intermissionInfo(
                        intermission_time_remaining = 0, 
                        intermission_time_elapsed = 0, 
                        in_intermission = True, ), 
                    power_play_info = openapi_client.models.game_linescore_power_play_info.GameLinescore_powerPlayInfo(
                        situation_time_remaining = 0, 
                        situation_time_elapsed = 72, 
                        in_situation = True, ), ),
                boxscore = openapi_client.models.game_boxscore.GameBoxscore(
                    teams = openapi_client.models.game_boxscore_teams.GameBoxscore_teams(
                        away = openapi_client.models.game_boxscore_team.GameBoxscoreTeam(
                            team = openapi_client.models.game_boxscore_team_team.GameBoxscoreTeam_team(
                                id = 28, 
                                name = 'San Jose Sharks', 
                                link = '/api/v1/teams/28', 
                                abbreviation = 'SJS', 
                                tri_code = 'SJS', ), 
                            team_stats = openapi_client.models.game_boxscore_team_team_stats.GameBoxscoreTeam_teamStats(
                                team_skater_stats = openapi_client.models.game_boxscore_team_team_stats_team_skater_stats.GameBoxscoreTeam_teamStats_teamSkaterStats(
                                    goals = 6, 
                                    pim = 6, 
                                    shots = 30, 
                                    power_play_percentage = '0.0', 
                                    power_play_goals = 0, 
                                    power_play_opportunities = 1, 
                                    face_off_win_percentage = '59.3', 
                                    blocked = 21, 
                                    takeaways = 9, 
                                    giveaways = 6, 
                                    hits = 15, ), ), 
                            players = openapi_client.models.game_boxscore_team_players.GameBoxscoreTeam_players(
                                person = openapi_client.models.game_boxscore_team_players_person.GameBoxscoreTeam_players_person(
                                    id = 8471709, 
                                    full_name = 'Marc-Edouard Vlasic', 
                                    link = '/api/v1/people/8471709', 
                                    shoots_catches = 'L', 
                                    roster_status = 'Y', ), 
                                jersey_number = '44', 
                                position = openapi_client.models.game_boxscore_team_players_position.GameBoxscoreTeam_players_position(
                                    code = 'D', 
                                    name = 'Defenseman', 
                                    type = 'Defenseman', 
                                    abbreviation = 'D', ), 
                                stats = openapi_client.models.game_boxscore_team_players_stats.GameBoxscoreTeam_players_stats(
                                    skater_stats = openapi_client.models.game_boxscore_team_players_stats_skater_stats.GameBoxscoreTeam_players_stats_skaterStats(
                                        time_on_ice = '23:04', 
                                        assists = 0, 
                                        goals = 0, 
                                        shots = 2, 
                                        hits = 0, 
                                        power_play_goals = 0, 
                                        power_play_assists = 0, 
                                        penalty_minutes = 0, 
                                        face_off_wins = 0, 
                                        faceoff_taken = 0, 
                                        takeaways = 0, 
                                        giveaways = 1, 
                                        short_handed_goals = 0, 
                                        short_handed_assists = 0, 
                                        blocked = 0, 
                                        plus_minus = 1, 
                                        even_time_on_ice = '18:12', 
                                        power_play_time_on_ice = '1:07', 
                                        short_handed_time_on_ice = '3:45', ), ), ), 
                            goalies = [
                                1.337
                                ], 
                            skaters = [
                                1.337
                                ], 
                            on_ice = [
                                1.337
                                ], 
                            on_ice_plus = [
                                openapi_client.models.game_boxscore_team_on_ice_plus_inner.GameBoxscoreTeam_onIcePlus_inner(
                                    player_id = 8477180, 
                                    shift_duration = 458, 
                                    stamina = 33, )
                                ], 
                            scratches = [
                                1.337
                                ], 
                            penalty_box = [
                                1.337
                                ], 
                            coaches = [
                                openapi_client.models.game_boxscore_team_coaches_inner.GameBoxscoreTeam_coaches_inner()
                                ], ), 
                        home = openapi_client.models.game_boxscore_team.GameBoxscoreTeam(), ), 
                    officials = [
                        openapi_client.models.game_official.GameOfficial(
                            official = openapi_client.models.game_official_official.GameOfficial_official(
                                id = 2071, 
                                full_name = 'Tim Peel', 
                                link = '/api/v1/people/2071', ), 
                            official_type = 'Linesman', )
                        ], ),
                decisions = openapi_client.models.game_live_data_decisions.Game_liveData_decisions(
                    winner = openapi_client.models.game_decision_player.GameDecisionPlayer(
                        id = 8477180, 
                        full_name = 'Aaron Dell', 
                        link = '/api/v1/people/8477180', ), 
                    loser = openapi_client.models.game_decision_player.GameDecisionPlayer(
                        id = 8477180, 
                        full_name = 'Aaron Dell', 
                        link = '/api/v1/people/8477180', ), 
                    first_star = , 
                    second_star = , 
                    third_star = , )
            )
        else:
            return GameLiveData(
        )
        """

    def testGameLiveData(self):
        """Test GameLiveData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
