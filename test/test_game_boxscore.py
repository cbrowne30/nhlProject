# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.game_boxscore import GameBoxscore

class TestGameBoxscore(unittest.TestCase):
    """GameBoxscore unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GameBoxscore:
        """Test GameBoxscore
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GameBoxscore`
        """
        model = GameBoxscore()
        if include_optional:
            return GameBoxscore(
                teams = openapi_client.models.game_boxscore_teams.GameBoxscore_teams(
                    away = openapi_client.models.game_boxscore_team.GameBoxscoreTeam(
                        team = openapi_client.models.game_boxscore_team_team.GameBoxscoreTeam_team(
                            id = 28, 
                            name = 'San Jose Sharks', 
                            link = '/api/v1/teams/28', 
                            abbreviation = 'SJS', 
                            tri_code = 'SJS', ), 
                        team_stats = openapi_client.models.game_boxscore_team_team_stats.GameBoxscoreTeam_teamStats(
                            team_skater_stats = openapi_client.models.game_boxscore_team_team_stats_team_skater_stats.GameBoxscoreTeam_teamStats_teamSkaterStats(
                                goals = 6, 
                                pim = 6, 
                                shots = 30, 
                                power_play_percentage = '0.0', 
                                power_play_goals = 0, 
                                power_play_opportunities = 1, 
                                face_off_win_percentage = '59.3', 
                                blocked = 21, 
                                takeaways = 9, 
                                giveaways = 6, 
                                hits = 15, ), ), 
                        players = openapi_client.models.game_boxscore_team_players.GameBoxscoreTeam_players(
                            person = openapi_client.models.game_boxscore_team_players_person.GameBoxscoreTeam_players_person(
                                id = 8471709, 
                                full_name = 'Marc-Edouard Vlasic', 
                                link = '/api/v1/people/8471709', 
                                shoots_catches = 'L', 
                                roster_status = 'Y', ), 
                            jersey_number = '44', 
                            position = openapi_client.models.game_boxscore_team_players_position.GameBoxscoreTeam_players_position(
                                code = 'D', 
                                name = 'Defenseman', 
                                type = 'Defenseman', 
                                abbreviation = 'D', ), 
                            stats = openapi_client.models.game_boxscore_team_players_stats.GameBoxscoreTeam_players_stats(
                                skater_stats = openapi_client.models.game_boxscore_team_players_stats_skater_stats.GameBoxscoreTeam_players_stats_skaterStats(
                                    time_on_ice = '23:04', 
                                    assists = 0, 
                                    goals = 0, 
                                    shots = 2, 
                                    hits = 0, 
                                    power_play_goals = 0, 
                                    power_play_assists = 0, 
                                    penalty_minutes = 0, 
                                    face_off_wins = 0, 
                                    faceoff_taken = 0, 
                                    takeaways = 0, 
                                    giveaways = 1, 
                                    short_handed_goals = 0, 
                                    short_handed_assists = 0, 
                                    blocked = 0, 
                                    plus_minus = 1, 
                                    even_time_on_ice = '18:12', 
                                    power_play_time_on_ice = '1:07', 
                                    short_handed_time_on_ice = '3:45', ), ), ), 
                        goalies = [
                            1.337
                            ], 
                        skaters = [
                            1.337
                            ], 
                        on_ice = [
                            1.337
                            ], 
                        on_ice_plus = [
                            openapi_client.models.game_boxscore_team_on_ice_plus_inner.GameBoxscoreTeam_onIcePlus_inner(
                                player_id = 8477180, 
                                shift_duration = 458, 
                                stamina = 33, )
                            ], 
                        scratches = [
                            1.337
                            ], 
                        penalty_box = [
                            1.337
                            ], 
                        coaches = [
                            openapi_client.models.game_boxscore_team_coaches_inner.GameBoxscoreTeam_coaches_inner()
                            ], ), 
                    home = openapi_client.models.game_boxscore_team.GameBoxscoreTeam(), ),
                officials = [
                    openapi_client.models.game_official.GameOfficial(
                        official = openapi_client.models.game_official_official.GameOfficial_official(
                            id = 2071, 
                            full_name = 'Tim Peel', 
                            link = '/api/v1/people/2071', ), 
                        official_type = 'Linesman', )
                    ]
            )
        else:
            return GameBoxscore(
        )
        """

    def testGameBoxscore(self):
        """Test GameBoxscore"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
