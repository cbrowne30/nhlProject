# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.game_linescore import GameLinescore

class TestGameLinescore(unittest.TestCase):
    """GameLinescore unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GameLinescore:
        """Test GameLinescore
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GameLinescore`
        """
        model = GameLinescore()
        if include_optional:
            return GameLinescore(
                current_period = 3,
                current_period_ordinal = '3rd',
                current_period_time_remaining = 'Final',
                periods = [
                    openapi_client.models.game_period.GamePeriod(
                        period_type = 'REGULAR', 
                        start_time = '2018-02-11T03:09:50Z', 
                        end_time = '2018-02-11T03:44:47Z', 
                        num = 1, 
                        ordinal_num = '1st', 
                        home = openapi_client.models.game_period_home.GamePeriod_home(
                            goals = 2, 
                            shots_on_goal = 14, 
                            rink_side = 'left', ), 
                        away = openapi_client.models.game_period_away.GamePeriod_away(
                            goals = 0, 
                            shots_on_goal = 9, 
                            rink_side = 'right', ), )
                    ],
                shootout_info = openapi_client.models.game_linescore_shootout_info.GameLinescore_shootoutInfo(
                    away = openapi_client.models.game_linescore_shootout_info_away.GameLinescore_shootoutInfo_away(
                        scores = 0, 
                        attempts = 0, ), 
                    home = openapi_client.models.game_linescore_shootout_info_away.GameLinescore_shootoutInfo_away(
                        scores = 0, 
                        attempts = 0, ), ),
                teams = openapi_client.models.game_linescore_teams.GameLinescore_teams(
                    home = openapi_client.models.game_linescore_team.GameLinescoreTeam(
                        team = openapi_client.models.game_boxscore_team_team.GameBoxscoreTeam_team(
                            id = 28, 
                            name = 'San Jose Sharks', 
                            link = '/api/v1/teams/28', 
                            abbreviation = 'SJS', 
                            tri_code = 'SJS', ), 
                        goals = 6, 
                        shots_on_goal = 30, 
                        goalie_pulled = True, 
                        num_skaters = 5, 
                        power_play = True, ), 
                    away = openapi_client.models.game_linescore_team.GameLinescoreTeam(
                        goals = 6, 
                        shots_on_goal = 30, 
                        goalie_pulled = True, 
                        num_skaters = 5, 
                        power_play = True, ), ),
                power_play_strength = 'Even',
                has_shootout = True,
                intermission_info = openapi_client.models.game_linescore_intermission_info.GameLinescore_intermissionInfo(
                    intermission_time_remaining = 0, 
                    intermission_time_elapsed = 0, 
                    in_intermission = True, ),
                power_play_info = openapi_client.models.game_linescore_power_play_info.GameLinescore_powerPlayInfo(
                    situation_time_remaining = 0, 
                    situation_time_elapsed = 72, 
                    in_situation = True, )
            )
        else:
            return GameLinescore(
        )
        """

    def testGameLinescore(self):
        """Test GameLinescore"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
